{
  "_args": [
    [
      {
        "raw": "@nx-js/compiler-util@^1.0.0",
        "scope": "@nx-js",
        "escapedName": "@nx-js%2fcompiler-util",
        "name": "@nx-js/compiler-util",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "G:\\school_rankings_development\\node_modules\\@nx-js\\framework"
    ]
  ],
  "_from": "@nx-js/compiler-util@>=1.0.0 <2.0.0",
  "_id": "@nx-js/compiler-util@1.0.0",
  "_inCache": true,
  "_location": "/@nx-js/compiler-util",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/compiler-util-1.0.0.tgz_1483951561876_0.895833577727899"
  },
  "_npmUser": {
    "name": "nx-js",
    "email": "miklos.bertalan@risingstack.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@nx-js/compiler-util@^1.0.0",
    "scope": "@nx-js",
    "escapedName": "@nx-js%2fcompiler-util",
    "name": "@nx-js/compiler-util",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@nx-js/attributes-middleware",
    "/@nx-js/events-middleware",
    "/@nx-js/filters",
    "/@nx-js/framework",
    "/@nx-js/interpolate-middleware",
    "/@nx-js/limiters"
  ],
  "_resolved": "https://registry.npmjs.org/@nx-js/compiler-util/-/compiler-util-1.0.0.tgz",
  "_shasum": "6180c7e868e20bbb4bee9881ba3ca020812acb5a",
  "_shrinkwrap": null,
  "_spec": "@nx-js/compiler-util@^1.0.0",
  "_where": "G:\\school_rankings_development\\node_modules\\@nx-js\\framework",
  "author": {
    "name": "Miklos Bertalan",
    "email": "miklos.bertalan@risingstack.com"
  },
  "bugs": {
    "url": "https://github.com/nx-js/compiler-util/issues"
  },
  "dependencies": {},
  "description": "An NX util, responsible for executing code in the context of an object.",
  "devDependencies": {
    "chai": "3.5.0",
    "mocha": "2.5.3",
    "pre-push": "0.1.1",
    "standard": "7.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "6180c7e868e20bbb4bee9881ba3ca020812acb5a",
    "tarball": "https://registry.npmjs.org/@nx-js/compiler-util/-/compiler-util-1.0.0.tgz"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "da251b26f7b5716be206601a805c883f04d5c13d",
  "homepage": "https://github.com/nx-js/compiler-util#readme",
  "keywords": [
    "nx",
    "util",
    "compile",
    "context",
    "eval",
    "code",
    "expression"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nx-js",
      "email": "miklos.bertalan@risingstack.com"
    }
  ],
  "name": "@nx-js/compiler-util",
  "optionalDependencies": {},
  "pre-push": [
    "lint",
    "test"
  ],
  "readme": "# The compiler util\n\nThis library is part of the [NX framework](http://nx-framework.com).\n\nThe main purpose of this library is to allow the execution of strings as code in the\ncontext of an object.\n\n## Installation\n\n```\n$ npm install @nx-js/compiler-util\n```\n\n## Platform support\n\n- Node: 6 and above\n- Chrome: 49 and above (after browserified)\n- Firefox: 38 and above (after browserified)\n- Safari: 10 and above (after browserified)\n- Edge: 12 and above (after browserified)\n- Opera: 36 and above (after browserified)\n- IE is not supported\n\n## Usage\n\n```js\nconst compiler = require('@nx-js/compiler-util')\n```\n\n### Compiling code\n\n`compiler.compileCode(string)` creates a function from a string. The returned function takes\nan object as argument and executes the string as code in the context of the passed object.\nThe string can be any valid JavaScript code.\n\n```js\nconst code = compiler.compileCode('return prop1 + prop2')\nconst sum = code({prop1: 1, prop2: 2}) // sum is 3\n```\n\n#### Temporary variables\n\nThe returned function also accepts a second object argument, that may contain temporary variables.\nTemporary variables are added to the context object while the code is executing.\nThey are favored over the permanent context variables.\n\n```js\nconst code = compiler.compileCode('return prop1 + prop2')\nconst context = {prop1: 1, prop2: 2}\nconst temporary = {prop1: 2}\nconst sum = code(context, temporary) // sum is 4, context is still {prop1: 1, prop2: 2}\n```\n\n#### Limiters\n\nLimiters are functions, which can defer or block code execution. Some popular limiters are debounce and throttle for example. Limiters can be registered by name with `compiler.limiter(name, function)` and used at the end of the code with the `&` symbol.\n\n```js\n// next is the code or the next limiter\ncompiler.limiter('delay', next => setTimeout(next, 1000))\n\nconst code = compiler.compileCode('console.log(message) & delay')\nconst context = {message: 'Hello World'}\ncode(context) // prints 'Hello World' to the console after a second\n```\n\nLimiters accept a context object, which can be used to share a context between executions of the code. It makes the creation of rate limiters - like throttle and debounce - straightforward.\n\n```js\ncompiler.limiter('debounce', debounce)\n\nfunction debounce (next, context) {\n  clearTimeout(context.timer)\n  context.timer = setTimeout(next, 200)\n}\n```\n\nAfter the context argument limiters accept any number of custom arguments. These can be passed after the limiter name in the code, separated by spaces.\n\n```js\ncompiler.limiter('delay', (next, context, amount) => setTimeout(next, amount))\n\nconst code = compiler.compileCode('console.log(message) & delay 2000')\nconst code2 = compiler.compileCode('console.log(message) & delay amount')\n\nconst context = {message: 'Hello World', amount: 3000}\ncode(context) // prints 'Hello World' to the console after 2 seconds\ncode2(context) // prints 'Hello World' to the console after 3 seconds\n```\n\nMultiple limiters can be piped with the `&` symbol.\n\n```js\nconst code = compiler.compileCode('console.log(message) & delay 1000 & throttle 100')\n\n// this logs 'Hello World' a second after you click the button\n// and it logs a message once per 100 milliseconds at most, excess messages are not logged\nbutton.addEventListener('code', () => code({message: 'Hello World'}))\n```\n\nYou can find some commonly used limiters in [this repo](https://github.com/nx-js/limiters).\n\n### Compiling expressions\n\n`compiler.compileExpression(string)` creates a function from a string. The returned function takes\nan object as argument and executes the string as an expression in the context of the passed object.\nIt returns the result of the evaluated expression. The string can be any javascript expression\nthat may come after a return statement.\n\n```js\nconst expression = compiler.compileExpression('prop1 || prop2')\nconst result = expression({prop2: 'Hello'}) // result is 'Hello'\n```\n\nExpressions return undefined instead of throwing a TypeError on invalid property access.\nThis allows lazy initialization of your data.\n\n```js\nconst expression = compiler.compileExpression('item.name')\nconst context = {}\n\nlet result = expression(context) // result is undefined, no error is thrown\n\ncontext.item = {name: 'item name'}\nresult = expression(context) // result is 'item name'\n```\n\n#### Filters\n\nFilters are functions, which can filter and modify expression result. Some popular filters are upperCase and trim for example. Filters can be registered by name with `compiler.filter(name, function)` and used at the end of the expression with the `|` symbol.\n\n```js\n// txt is the result of the expression\ncompiler.filter('upperCase', txt => txt.toUpperCase())\n\nconst expr = compiler.compileExpression('message | upperCase')\nconst context = {message: 'Hello World'}\nconsole.log(expr(context)) // prints 'HELLO WORLD' to the console\n```\n\nFilters accept any number of custom arguments. These can be passed after the filter name in the expression, separated by spaces.\n\n```js\ncompiler.filter('splice', (txt, start, end) => txt.splice(start, end))\n\nconst expr = compiler.compileExpression('message | splice 0 6')\nconst context = {message: 'Hello World'}\nconsole.log(expr(context)) // prints 'Hello' to the console\n```\n\nMultiple filters can be piped with the `|` symbol.\n\n```js\nconst expr = compiler.compileExpression('message | splice 0 6 | upperCase')\nconst context = {message: 'Hello World'}\nconsole.log(expr(context)) // prints 'HELLO' to the console\n```\n\nYou can find some commonly used filters in [this repo](https://github.com/nx-js/filters).\n\n### Handling globals\n\n`compiler.expose('String, String, ...')` exposes globals by name for the compiler. Non of the globals are exposed by default.\n\n```js\nconst code = compiler.compileCode('console.log(Math.round(num))')\ncompiler.expose('console', 'Math')\ncode({num: 1.8}) // logs 2 to the console\n```\n\nContext variables are always favored over global ones, when both are present with the same name.\n\n`compiler.hide(String, String, ...)` hides globals by name, while `compiler.hideAll()` hides all globals.\n\n```js\nconst code = compiler.compileCode('console.log(Math.round(num))')\ncompiler.expose('console', 'Math')\ncode({num: 1.8}) // logs 2 to the console\ncompiler.hide('console', 'Math')\ncode({num: 1.8}) // throws an error, console and Math are undefined\n```\n\n## Contributions\n\nThis library has the very specific purpose of supporting the\n[NX framework](https://github.com/nx-js/framework).\nFeatures should only be added, if they are used by the framework. Otherwise please fork.\n\nBug fixes, tests and doc updates are always welcome.\nTests and linter (standardJS) must pass.\n\n## Authors\n\n  - [Miklos Bertalan](https://github.com/solkimicreb)\n\n# License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/nx-js/compiler-util.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "mocha test"
  },
  "standard": {
    "ignore": [
      "test"
    ]
  },
  "version": "1.0.0"
}
